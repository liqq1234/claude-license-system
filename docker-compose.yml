services:
  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: claude-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Activation Backend 服务
  activation-backend:
    build:
      context: ./claude-backend/activation-backend
      dockerfile: Dockerfile
    container_name: claude-activation-backend
    environment:
      - NODE_ENV=development
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=license_server
      - DB_USER=${LICENSE_DB_USER}
      - DB_PASSWORD=${LICENSE_DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=0
      - PORT=8888
      - JWT_SECRET=${JWT_SECRET}
      - LICENSE_SECRET=${LICENSE_SECRET}
      - TOKEN_ENCRYPTION_KEY=${TOKEN_ENCRYPTION_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - POOL_BACKEND_URL=http://pool-backend:8787
      - CLAUDE_PROXY_DOMAIN=${CLAUDE_PROXY_DOMAIN}
    volumes:
      # 挂载源代码目录实现热重载
      - ./claude-backend/activation-backend:/app
      - /app/node_modules  # 避免覆盖容器内的node_modules
    ports:
      - "8888:8888"
    depends_on:
      - redis
    restart: unless-stopped
    command: npm run dev

  # Pool Backend 服务
  pool-backend:
    build:
      context: ./claude-backend/pool-backend
      dockerfile: Dockerfile
    container_name: claude-pool-backend
    environment:
      - NODE_ENV=development
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=claudehub
      - DB_USER=${POOL_DB_USER}
      - DB_PASSWORD=${POOL_DB_PASSWORD}
      - PORT=8787
      - BASE_URL=${CLAUDE_BASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - LICENSE_SERVER_URL=http://activation-backend:8888
      - CLAUDE_BASE_URL=${CLAUDE_BASE_URL}
      - TOKEN_EXPIRES_IN=${TOKEN_EXPIRES_IN}
      - DB_CONNECTION_LIMIT=${DB_CONNECTION_LIMIT}
      - DB_ACQUIRE_TIMEOUT=${DB_ACQUIRE_TIMEOUT}
      - DB_TIMEOUT=${DB_TIMEOUT}
    volumes:
      # 挂载源代码目录实现热重载
      - ./claude-backend/pool-backend:/app
      - /app/node_modules  # 避免覆盖容器内的node_modules
    ports:
      - "8787:8787"
    restart: unless-stopped
    command: npm run dev

  # Frontend 服务
  claude-frontend:
    build:
      context: ./claude-frontend
      dockerfile: Dockerfile
    container_name: claude-frontend-dev
    environment:
      - VITE_ACTIVATION_API_URL=${FRONTEND_ACTIVATION_API_URL}
      - VITE_CLAUDE_POOL_API_URL=${FRONTEND_POOL_API_URL}
      - VITE_APP_NAME=Claude License System
      - VITE_APP_VERSION=1.0.0
    volumes:
      # 挂载源代码目录实现热重载
      - ./claude-frontend:/app
      - /app/node_modules  # 避免覆盖容器内的node_modules
    ports:
      - "8081:8080"  # Vite开发服务器端口
    restart: unless-stopped
    command: npm run dev -- --host 0.0.0.0

  # Manager 服务
  claude-manager:
    build:
      context: ./claude-manager
      dockerfile: Dockerfile
    container_name: claude-manager-dev
    environment:
      - VITE_ACTIVATION_API_URL=${MANAGER_ACTIVATION_API_URL}
      - VITE_CLAUDE_POOL_API_URL=${MANAGER_POOL_API_URL}
      - VITE_APP_NAME=Claude Manager
      - VITE_APP_VERSION=1.0.0
    volumes:
      # 挂载源代码目录实现热重载
      - ./claude-manager:/app
      - /app/node_modules  # 避免覆盖容器内的node_modules
    ports:
      - "8082:8080"  # Vite开发服务器端口
    restart: unless-stopped
    command: npm run dev -- --host 0.0.0.0

volumes:
  redis_data:
